<template>
  <view class="page up__posts_page">
    <view class="up__posts_body">
      <view class="up__posts_content">
        <textarea class="up__posts_txt" value="{{txt}}" @input="input" placeholder="说你想说的一切……" placeholder-style="color: #a3a2a7;" />
      </view>
      <view class="up__posts_img" @tap="upload">
        <image class="up__posts_img-body" mode="aspectFill" src="{{image ? image : '/assets/image/icon-add.png'}}" />
        <view wx:if="{{again}}" class="up__posts_img-up">
          重新上传
        </view>
      </view>
    </view>
    <view class="up__posts_topic-foot">
      <view class="up__posts_topic-wrap">
        <view class="up__posts_topic-name">
          {{title}}
        </view>
      </view>
      <view class="up__posts_upload" @tap="send">
        立即发布
      </view>
    </view>
    <login-modal />
    <error-modal />
  </view>
</template>

<script>
import wepy from 'wepy'
import qiniuUploader from '@/utils/qiniuUploader'

import welcome from '@/mixins/welcome'
import error from '@/mixins/error'

import Config from '@/config/index'
import { http } from '@/utils/request'

import UserGuide from '@/components/common/new-guide'
import ErrorToast from '@/components/common/toast'

export default class UpImage extends wepy.page {
  config = {
    navigationBarTitleText: '发布图文'
  }
  data = {
    title: '',
    id: '',
    again: false,
    image: '',
    txt: ''
  }
  mixins = [welcome, error]
  onLoad(options) {
    this.title = options.title
    this.id = options['subject_id']
  }
  components = {
    'login-modal': UserGuide,
    'error-modal': ErrorToast
  }
  async upApi(data) {
    const responseWrap = await http({
      url: Config.api.subject.upImg.url,
      method: Config.api.subject.upImg.method,
      data
    })
    if (responseWrap.status === '200') {
      // 成功
      this.again = false
      this.image = ''
      this.txt = ''
      this.$apply()
    } else {
      this.errorHandler({ code: '5002', message: '发布失败' })
    }
  }
  methods = {
    async upload() {
      const image = await wepy.chooseImage({
        count: 1,
        sizeType: ['compressed'],
        sourceType: ['album', 'camera']
      })
      this.image = image.tempFilePaths
      this.again = true
      this.$apply()
    },
    input(e) {
      const value = e.detail.value
      this.txt = value
    },
    async send() {
      if (this.image[0]) {
        try {
          wepy.showLoading({
            title: '发布中...',
            mask: true
          })
          qiniuUploader.upload(this.image[0], async res => {
            const imgUrl = res.imageURL
            const data = {
              subject_id: this.id
            }
            if (this.txt) {
              data.title = this.txt
            }
            if (imgUrl) {
              data.poster = `http://${imgUrl}`
            }
            await this.upApi(data)
            wepy.hideLoading()
            wepy.showToast({
              title: '发布成功',
              icon: 'success',
              duration: 2000
            })
          }, () => {
            wepy.hideLoading()
            this.errorHandler({ code: '5001', message: '上传图片失败' })
          }, {
            region: 'SCN',
            domain: 'cdn.hfc.highfaner.com', // oigxm5f12.bkt.clouddn.com
            uptokenURL: 'https://api.hfc.highfaner.com/v1/uptoken'
          })
        } catch (err) {
        }
        return
      }

      if (this.txt) {
        wepy.showLoading({
          title: '发布中...',
          mask: true
        })
        await this.upApi({ subject_id: this.id, title: this.txt })
        wepy.hideLoading()
        wepy.showToast({
          title: '发布成功',
          icon: 'success',
          duration: 2000
        })
        return
      }

      this.errorHandler({ code: '5003', message: '至少选择一项内容发布' })
    }
  }
}
</script>
