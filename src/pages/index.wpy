<template>
  <view class="page index__page">
    <hero title="发现" desc="全球精选热门频道" />
    <view class="index__body">
      <repeat for="{{hotList}}" key="index" index="index" item="topic">
        <topic :topic.sync="topic" :index.sync="index" from="hot" />
      </repeat>
    </view>
    <login-modal />
    <error-modal />
  </view>
</template>

<script>
import wepy from 'wepy'
import { connect, getStore } from 'wepy-redux'
import { HOT_SUBJECT_LIST } from '@/store/types'

import welcome from '@/mixins/welcome'
import error from '@/mixins/error'
import next from '@/mixins/next'
import subject from '@/mixins/subject'

import Hero from '@/components/topic/hero'
import Topic from '@/components/topic/body'
import UserGuide from '@/components/common/new-guide'
import ErrorToast from '@/components/common/toast'

import Config from '@/config/index'
import { http } from '@/utils/request'

const store = getStore()

@connect({
  hotList(state) {
    return state.subject.hotList
  }
})

export default class Index extends wepy.page {
  config = {
    navigationBarTitleText: '',
    enablePullDownRefresh: true
  }

  components = {
    'hero': Hero,
    'topic': Topic,
    'login-modal': UserGuide,
    'error-modal': ErrorToast
  }

  onShareAppMessage() {
    return {
      title: '年轻人都在玩儿',
      path: `/pages/find`,
      imageUrl: 'http://cdn.hfc.highfaner.com/preview/share/invitation_firend.jpg?imageView2/1/w/500/h/400'
    }
  }

  mixins = [welcome, error, next, subject]

  async getSubjectList() {
    const responseWrap = await http({
      url: `${Config.api.subject.hot.url}?page=${this.page}&next=${this.next}`,
      method: Config.api.subject.hot.method
    })
    let list = []
    if (responseWrap.status === '200') {
      list = responseWrap.data.list
      if (list.length === 10) {
        this.isHasNext = true
      } else {
        this.isHasNext = false
      }
    }

    return list || []
  }

  events = {
    async follower(index, subjectId, following) {
      following = following ? 0 : 1
      this.hotList[index].following = following
      store.dispatch({ type: HOT_SUBJECT_LIST, payload: { list: this.hotList } })
      const responseWrap = await http({
        url: Config.api.subject.follower.url,
        method: Config.api.subject.follower.method,
        data: { subject_id: subjectId, following: String(following) }
      })
      if (responseWrap.status !== '200') {
        this.errorHandler({ code: responseWrap.status, message: '关注话题失败' })
        following = following ? 0 : 1
        this.hotList[index].following = following
        store.dispatch({ type: HOT_SUBJECT_LIST, payload: { list: this.hotList } })
      }
    }
  }

  async ready() {
    // 正常进入
    wepy.showLoading({
      title: '加载中...'
    })
    let subjectList = await this.getSubjectList()
    wepy.hideLoading()
    subjectList = this.listHandler(subjectList)
    store.dispatch({ type: HOT_SUBJECT_LIST, payload: { list: subjectList } })
  }

  async nextPage() {
    let subjectList = await this.getSubjectList()
    subjectList = this.listHandler(subjectList)
    const list = [].concat(this.hotList).concat(subjectList)
    store.dispatch({ type: HOT_SUBJECT_LIST, payload: { list } })
  }

  async onLoad() {
  }
}
</script>
