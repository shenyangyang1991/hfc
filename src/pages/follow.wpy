<template>
  <view class="page index__page">
    <hero title="关注" desc="您关注的话题都在这里" />
    <view wx:if="{{followList && followList.length}}" class="index__body">
      <repeat for="{{followList}}" key="index" index="index" item="topic">
        <topic :topic.sync="topic" :index.sync="index" from="follow" />
      </repeat>
    </view>
    <none wx:if="{{!followList || !followList.length}}" />
    <login-modal />
    <error-modal />
  </view>
</template>

<script>
import wepy from 'wepy'
import { connect, getStore } from 'wepy-redux'
import { FOLLOW_SUBJECT_LIST } from '@/store/types'

import subject from '@/mixins/subject'
import welcome from '@/mixins/welcome'
import error from '@/mixins/error'
import next from '@/mixins/next'

import Hero from '@/components/topic/hero'
import Topic from '@/components/topic/body'
import UserGuide from '@/components/common/new-guide'
import ErrorToast from '@/components/common/toast'
import None from '@/components/common/none'

import Config from '@/config/index'
import { http } from '@/utils/request'

const store = getStore()

@connect({
  followList(state) {
    return state.subject.followList
  }
})

export default class Follow extends wepy.page {
  config = {
    navigationBarTitleText: '',
    enablePullDownRefresh: true
  }
  components = {
    'hero': Hero,
    'topic': Topic,
    'login-modal': UserGuide,
    'error-modal': ErrorToast,
    'none': None
  }

  mixins = [welcome, error, next, subject]

  async getSubjectList() {
    const responseWrap = await http({
      url: `${Config.api.subject.follow.url}?page=${this.page}&next=${this.next}`,
      method: Config.api.subject.follow.method
    })
    let list = []
    if (responseWrap.status === '200') {
      list = responseWrap.data.list
      if (list.length === 10) {
        this.isHasNext = true
      } else {
        this.isHasNext = false
      }
    }

    return list || []
  }

  async nextPage() {
    let subjectList = await this.getSubjectList()
    subjectList = this.listHandler(subjectList)
    const list = [].concat(this.followList).concat(subjectList)
    store.dispatch({ type: FOLLOW_SUBJECT_LIST, payload: { list } })
  }
  async ready() {
    // 正常进入
    let subjectList = await this.getSubjectList()
    subjectList = this.listHandler(subjectList)
    store.dispatch({ type: FOLLOW_SUBJECT_LIST, payload: { list: subjectList } })
  }

  onLoad() {
  }
}
</script>
